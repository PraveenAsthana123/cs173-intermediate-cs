// match.cpp//  This program uses a stack to decide whether a parenthesized expression is//  well formed (the parentheses match).#include "stack.h"#include <iostream>using namespace std;bool IsOpen(char symbol){   return ((symbol == '(') || (symbol == '{') || (symbol == '['));}bool IsClosed(char symbol){   return ((symbol == ')') || (symbol == '}') || (symbol == ']'));}bool Matches(char symbol, char openSymbol){   return (((openSymbol == '(') && (symbol == ')')) ||           ((openSymbol == '{') && (symbol == '}')) ||           ((openSymbol == '[') && (symbol == ']')));}int main(){   char symbol;   Stack stack;   bool balanced = true;   char openSymbol;      cout << "Expression: ";   cin.get(symbol);   while ((symbol != '\n') && balanced)   {      if (IsOpen(symbol))      {	  stack.Push(symbol);      }      else if (IsClosed(symbol))      {          if (stack.Size() == 0)	  {             balanced = false;          }	  else          {	      openSymbol = stack.Pop();	      balanced = Matches(symbol, openSymbol);	  }      }      cin.get(symbol);   }      if (balanced && stack.Size() == 0)      cout << "Expression is well formed." << endl;   else      cout << "Expression is not well formed." << endl;         return 0;}