// stack.cpp (documentation omitted; see stack.h)#include "stack.h"Stack::Stack(){   size = 0;   capacity = 5;   items = new ItemType[capacity];}int Stack::Size() const{    return size;}void Stack::Push(ItemType item){    // resize the array if we run out of space in array    if (size == capacity)    {		capacity += 5;		ItemType* temp = new ItemType[capacity];			// copy items to temp		for(int i = 0; i < size; ++i)	    	temp[i] = items[i];			// free up old array		delete []items;			// make items point to new array		items = temp;		    }        // insert item at the top of the stack    items[size] = item;    size++;}ItemType Stack::Pop(){    size--;    return items[size];}ItemType Stack::Top() const{        return items[size - 1];}Stack::Stack(const Stack &source){    // copy size, capacity, and create new arrray    size = source.size;    capacity = source.capacity;    items = new ItemType[capacity];    // copy over items in source into this    for(int i = 0; i < size; ++i)		items[i] = source.items[i];}void Stack::operator=(const Stack &source){    // free up memory    delete []items;	    // copy size, capacity, and create new arrray    size = source.size;    capacity = source.capacity;    items = new ItemType[capacity];    // copy over items in source into this    for(int i = 0; i < size; ++i)		items[i] = source.items[i];}Stack::~Stack(){    delete []items;}