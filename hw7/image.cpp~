// Name: James Le
// Date: March 26, 2015
// File name: image.cpp

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <iostream>
#include "Complex.h"
using namespace std;

#define HEIGHT 500
#define WIDTH  500
#define X_START -1.5
#define X_END    0.5
#define Y_START -1.0
#define Y_END    1.0

/*** 
Function to write 2d arrays of RGB values into a bitmap image
pre-condition :	red, green, and blue are integer 2d arrays (of size HEIGHT x WIDTH) with colors for each pixel
post-condition: writes a file called img.bmp with the image in the array
Adapted from http://stackoverflow.com/questions/2654480/writing-bmp-image-in-pure-c-c-without-other-libraries
***/

void writeBMP(int red[HEIGHT][WIDTH], int green[HEIGHT][WIDTH], int blue[HEIGHT][WIDTH])
{
    int r, g, b, x, y, area = HEIGHT * WIDTH;
    FILE *f;
    unsigned char *img = NULL;
    int filesize = 54 + 3 * area;  
    if( img )
	free( img );
    img = (unsigned char *)malloc(3*area);
    memset(img, 0, 3*area * sizeof(unsigned char));
    
    for(int i = 0; i < WIDTH; i++)
    {
	for(int j = 0; j < HEIGHT; j++)
	{
	    x=i; y=(HEIGHT-1)-j;
	    r = red[i][j];
	    g = green[i][j];
	    b = blue[i][j];
	    if (r > 255) r=255;
	    if (g > 255) g=255;
	    if (b > 255) b=255;
	    img[(x+y*WIDTH)*3+2] = (unsigned char)(r);
	    img[(x+y*WIDTH)*3+1] = (unsigned char)(g);
	    img[(x+y*WIDTH)*3+0] = (unsigned char)(b);
	}
    }
    
    unsigned char bmpfileheader[14] = {'B','M', 0,0,0,0, 0,0, 0,0, 54,0,0,0};
    unsigned char bmpinfoheader[40] = {40,0,0,0, 0,0,0,0, 0,0,0,0, 1,0, 24,0};
    unsigned char bmppad[3] = {0,0,0};
    
    bmpfileheader[ 2] = (unsigned char)(filesize    );
    bmpfileheader[ 3] = (unsigned char)(filesize>> 8);
    bmpfileheader[ 4] = (unsigned char)(filesize>>16);
    bmpfileheader[ 5] = (unsigned char)(filesize>>24);
    
    bmpinfoheader[ 4] = (unsigned char)(WIDTH    );
    bmpinfoheader[ 5] = (unsigned char)(WIDTH>> 8);
    bmpinfoheader[ 6] = (unsigned char)(WIDTH>>16);
    bmpinfoheader[ 7] = (unsigned char)(WIDTH>>24);
    bmpinfoheader[ 8] = (unsigned char)(HEIGHT   );
    bmpinfoheader[ 9] = (unsigned char)(HEIGHT>> 8);
    bmpinfoheader[10] = (unsigned char)(HEIGHT>>16);
    bmpinfoheader[11] = (unsigned char)(HEIGHT>>24);
    
    f = fopen("img.bmp","wb");
    fwrite(bmpfileheader,1,14,f);
    fwrite(bmpinfoheader,1,40,f);
    for(int i=0; i<HEIGHT; i++)
    {
	fwrite(img+(WIDTH*(HEIGHT-i-1)*3),3,WIDTH,f);
	fwrite(bmppad,1,(4-(WIDTH*3)%4)%4,f);
    }
    fclose(f);
}

int mandelbrot(Complex &c)
{
  Complex z;
  int count = 0;
  float mag;

  while (count < 32 and mag <= 2)
    {
      z = z*z + c;
      mag = z.getReal() * z.getReal() + z.getImag() * z.getImag();
      count++;
    }

  return count;
}

int main(void)
{
    int red[HEIGHT][WIDTH], green[HEIGHT][WIDTH], blue[HEIGHT][WIDTH];
    int a = 0;
    int b = 0;
    for (float i = Y_START; i < Y_END && a < WIDTH; i += float(Y_END - Y_START) / WIDTH) // imaginary
      {
	for (float j = X_START; j < X_END && b < HEIGHT; j += float(X_END - X_START) / HEIGHT) // real
	  {
	    Complex c(j,i);
	    int iterations = mandelbrot(c);

	    if (iterations < 8)
	      {
		red[b][a] = 255;
		green[b][a] = 192;
		blue[b][a] = 203;
	      }
	    else if (iterations < 16)
	      {
		red[b][a] = 255;
		green[b][a] = 250;
		blue[b][a] = 250;
	      }
	    else if (iterations < 24)
	      {
		red[b][a] = 0;
		green[b][a] = 255;
		blue[b][a] = 255;
	      }
	    else
	      {
		red[b][a] = 0;
		green[b][a] = 0;
		blue[b][a] = 0;
	      }
	    b++;
	  }

	a++;
	b = 0;
      }

    writeBMP(red, green, blue);

    return 0;
}

